generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Approval {
  approval_id Int       @id
  nominee_id  String    @default(uuid()) @db.VarChar(255)
  title       String    @default("") @db.VarChar(60)
  reason      String    @default("") @db.VarChar(2000)
  status      Boolean   @default(false) @db.TinyInt
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Nominees    Nominees? @relation(fields: [nominee_id], references: [nominee_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Approval_Nominees1")

  @@index([nominee_id], map: "fk_Approval_Nominees1_idx")
}

model Audit {
  audit_id    Int          @id
  user_id     String       @default(uuid()) @db.VarChar(255)
  change_set  Json
  record_id   String
  record_name String       @default("") @db.VarChar(255)
  created_at  DateTime     @default(now())
  Users       Users        @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Audit_Users1")
  Nominees    Nominees?
  ReveiwTags  ReveiwTags[]

  @@index([user_id], map: "fk_Audit_Users1_idx")
}

model BiweaklyMeeting {
  BiweaklyMeeting_id Int      @id
  user_id            String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  Users              Users    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Biweakly Meeting_Users1")

  @@index([user_id], map: "fk_Biweakly Meeting_Users1_idx")
  @@map("Biweakly Meeting")
}

model Feedback {
  feedback_id    Int         @id
  user_review_id Int
  reviewed_by_id Int
  rating         Float       @default(0.0) @db.Float
  reason         String      @default("") @db.VarChar(2000)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  UserReviews    UserReviews @relation(fields: [user_review_id], references: [user_review_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Feedback_User Reviews1")

  @@index([user_review_id], map: "fk_Feedback_User Reviews1_idx")
}

model Nominees {
  nominee_id     String      @id @default(uuid()) @db.VarChar(255)
  audit_id       Int         @unique
  user_review_id Int
  title          String      @db.VarChar(100)
  quater_no      Int         @default(1) @db.UnsignedInt
  quater_year    Int         @default(2022) @db.UnsignedInt
  reason         String      @default("") @db.VarChar(2000)
  created_at     DateTime    @default(now())
  deleted_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  Approval       Approval[]
  Audit          Audit       @relation(fields: [audit_id], references: [audit_id])
  user_reviews   UserReviews @relation(fields: [user_review_id], references: [user_review_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Nominees_User Reviews1")

  @@index([audit_id], map: "fk_Nominees_Audit1_idx")
  @@index([user_review_id], map: "fk_Nominees_User Reviews1_idx")
}

model ReveiwTags {
  review_tags_id  Int               @id
  audit_id        Int
  tags_name       String            @default("") @db.VarChar(35)
  description     String            @default("") @db.VarChar(35)
  created_at      DateTime          @default(now())
  deleted_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Audit           Audit             @relation(fields: [audit_id], references: [audit_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Reveiw Tags_Audit1")
  ReviewTemplates ReviewTemplates[]

  @@index([audit_id], map: "fk_Reveiw Tags_Audit1_idx")
  @@map("Reveiw Tags")
}

model ReviewTemplates {
  review_template_id Int         @id
  review_tags_id     Int
  user_review_id     Int
  weightage          Float       @default(0.0) @db.Float
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  ReveiwTags         ReveiwTags  @relation(fields: [review_tags_id], references: [review_tags_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Review Templates_Reveiw Tags1")
  UserReviews        UserReviews @relation(fields: [user_review_id], references: [user_review_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ReviewTemplates_User Reviews1")

  @@index([user_review_id], map: "fk_ReviewTemplates_User Reviews1_idx")
  @@index([review_tags_id], map: "fk_Review Templates_Reveiw Tags1_idx")
  @@map("Review Templates")
}

model Tasks {
  task_id        Int         @id
  user_id        String
  user_review_id Int
  description    String      @db.VarChar(2000)
  duration       DateTime    @db.Date
  rating         Float       @default(0.0) @db.Float
  status         Boolean     @default(false) @db.TinyInt
  type           String      @default("") @db.VarChar(255)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
  UserReviews    UserReviews @relation(fields: [user_review_id], references: [user_review_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_User Reviews1")
  Users          Users       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_Users1")

  @@index([user_review_id], map: "fk_Tasks_User Reviews1_idx")
  @@index([user_id], map: "fk_Tasks_Users1_idx")
}

model UserReviews {
  user_review_id  Int               @id
  user_id         String
  marks_received  Json
  estimated_point Float             @default(0.0) @db.Float
  is_approved     Boolean           @default(false) @db.TinyInt
  reviewed_by_id  Int
  quater_no       Int               @default(1) @db.UnsignedInt
  on_leave        Boolean           @default(false) @db.TinyInt
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Feedback        Feedback[]
  Nominees        Nominees[]
  ReviewTemplates ReviewTemplates[]
  Tasks           Tasks[]
  Users           Users             @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_User Reviews_Users")

  @@index([user_id], map: "fk_User Reviews_Users_idx")
  @@map("User Reviews")
}

model Users {
  user_id              String            @id @default(uuid()) @db.VarChar(255)
  first_name           String            @default("") @db.VarChar(30)
  last_name            String            @default("") @db.VarChar(30)
  joining_date         DateTime          @db.Date
  department_name      String            @default("") @db.VarChar(50)
  designation          String            @default("") @db.VarChar(50)
  email                String            @unique @db.VarChar(100)
  employee_id          Int               @db.UnsignedInt
  lead_id              Int               @db.UnsignedInt
  manager_id           Int               @db.UnsignedInt
  on_leave             Boolean           @default(false) @db.TinyInt
  partial_joining_date DateTime          @db.Date
  profile_pic          String            @default("") @db.VarChar(255)
  created_at           DateTime          @default(now())
  deleted_at           DateTime          @default(now())
  updated_at           DateTime          @updatedAt
  Audit                Audit[]
  BiweaklyMeeting      BiweaklyMeeting[]
  Tasks                Tasks[]
  UserReviews          UserReviews[]
}
