generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Approval {
  approval_id Int       @id
  nominee_id  String    @default(uuid()) @db.VarChar(255)
  title       String    @db.VarChar(255)
  reason      String    @db.VarChar(255)
  status      Int       @db.TinyInt
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Nominees    Nominees? @relation(fields: [nominee_id], references: [nominee_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Approval_Nominees1")

  @@index([nominee_id], map: "fk_Approval_Nominees1_idx")
}

model Audit {
  audit_id    Int          @id
  user_id     String       @default(uuid()) @db.VarChar(255)
  change_set  Json
  record_id   String
  record_name String       @db.VarChar(255)
  created_at  DateTime     @default(now())
  Users       Users?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Audit_Users1")
  Nominees    Nominees[]
  ReveiwTags  ReveiwTags[]

  @@index([user_id], map: "fk_Audit_Users1_idx")
}

model biweakly_meeting {
  biweakly_meeting_id Int      @id
  user_id             String   @db.VarChar(255)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  Users               Users?   @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Biweakly Meeting_Users1")

  @@index([user_id], map: "fk_Biweakly Meeting_Users1_idx")
  @@map("Biweakly Meeting")
}

model Feedback {
  feedback_id    Int          @id
  user_review_id Int
  reviewed_by_id Int
  rating         Float        @db.Float
  reason         String       @db.VarChar(255)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  UserReviews    UserReviews? @relation(fields: [user_review_id], references: [user_review_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Feedback_User Reviews1")

  @@index([user_review_id], map: "fk_Feedback_User Reviews1_idx")
}

model Nominees {
  nominee_id     String       @id @default(uuid()) @db.VarChar(255)
  audit_id       Int
  user_review_id Int
  title          String       @db.VarChar(255)
  quater_no      Int
  quater_year    Int
  reason         String       @db.VarChar(255)
  created_at     DateTime     @default(now())
  deleted_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  Approval       Approval[]
  Audit          Audit?       @relation(fields: [audit_id], references: [audit_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Nominees_Audit1")
  user_reviews   UserReviews? @relation(fields: [user_review_id], references: [user_review_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Nominees_User Reviews1")

  @@index([audit_id], map: "fk_Nominees_Audit1_idx")
  @@index([user_review_id], map: "fk_Nominees_User Reviews1_idx")
}

model ReveiwTags {
  review_tags_id  Int               @id
  audit_id        Int
  tags_name       String            @db.VarChar(255)
  description     String            @db.VarChar(255)
  created_at      DateTime          @default(now())
  deleted_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Audit           Audit?            @relation(fields: [audit_id], references: [audit_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Reveiw Tags_Audit1")
  ReviewTemplates ReviewTemplates[]

  @@index([audit_id], map: "fk_Reveiw Tags_Audit1_idx")
  @@map("Reveiw Tags")
}

model ReviewTemplates {
  review_template_id Int         @id
  review_tags_id     Int
  weightage          Float       @db.Float
  created_at         DateTime    @default(now())
  updated_at         DateTime    @updatedAt
  ReveiwTags         ReveiwTags? @relation(fields: [review_tags_id], references: [review_tags_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Review Templates_Reveiw Tags1")

  @@index([review_tags_id], map: "fk_Review Templates_Reveiw Tags1_idx")
  @@map("Review Templates")
}

model Tasks {
  task_id        Int          @id
  user_id        String       @db.VarChar(255)
  user_review_id Int
  description    String       @db.VarChar(255)
  duration       DateTime     @db.Date
  rating         Float        @db.Float
  status         Int          @db.TinyInt
  type           String       @db.VarChar(255)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  UserReviews    UserReviews? @relation(fields: [user_review_id], references: [user_review_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_User Reviews1")
  Users          Users?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Tasks_Users1")

  @@index([user_review_id], map: "fk_Tasks_User Reviews1_idx")
  @@index([user_id], map: "fk_Tasks_Users1_idx")
}

model UserReviews {
  user_review_id  Int        @id
  user_id         String     @default(uuid()) @db.VarChar(255)
  estimated_point Float      @db.Float
  marks_recevied  Float      @db.Float
  is_approved     Int        @db.TinyInt
  reviewed_by_id  Int
  quater_no       Int
  on_leave        Int        @db.TinyInt
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  Feedback        Feedback[]
  Nominees        Nominees[]
  Tasks           Tasks[]
  Users           Users?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_User Reviews_Users")

  @@index([user_id], map: "fk_User Reviews_Users_idx")
  @@map("User Reviews")
}

model Users {
  user_id              String             @id @default(uuid()) @db.VarChar(255)
  first_name           String             @db.VarChar(30)
  last_name            String             @db.VarChar(30)
  joining_date         DateTime           @db.Date
  department_name      String             @db.VarChar(30)
  designation          String             @db.VarChar(20)
  email                String             @unique @db.VarChar(100)
  employee_id          Int                @db.UnsignedInt
  lead_id              Int                @db.UnsignedInt
  manager_id           Int                @db.UnsignedInt
  on_leave             Int                @db.UnsignedTinyInt
  partial_joining_date DateTime           @db.Date
  profile_pic          String             @db.VarChar(255)
  created_at           DateTime           @default(now())
  deleted_at           DateTime           @default(now())
  updated_at           DateTime           @updatedAt
  Audit                Audit[]
  biweakly_meeting     biweakly_meeting[]
  Tasks                Tasks[]
  UserReviews          UserReviews[]
}
